<?php

// Permissions
// Unit tests
// Documentation

/**
 * Implements hook_nodeapi().
 * Adds the annotation to the rendered node object if it should have an annotation in the current context
 */
function contextual_annotation_node_view($node, $view_mode, $langcode) {

  if ($view_mode == 'teaser') {
    $key = contextual_annotation_get_key();
    if ($key) {
      $annotation = contextual_annotation_get_annotation($key, $node->nid);
      if ($annotation) {
        $key = (array_key_exists('teaser', $node->content))? 'teaser':'body';
        $node->content[$key]["#{$annotation['position']}"] = " <span class='context-annotation'>" . $annotation['annotation'] . "</span> ";
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function contextual_annotation_node_delete($node) {
  if ($node && $node->nid)
    db_delete('contextual_annotation')
      ->condition('nid', $node->nid)
      ->execute();
}

/**
 * Implements hook_node_view_alter().
 *
 * Use hook_node_view_alter() to add the node's contextual links. Only add if we an get a key from
 * contextual_annotation_get_key(), meaning we're on a taxonomy page.
 */
function contextual_annotation_node_view_alter(&$build) {
  $node = $build['#node'];
  $view_mode = $build['#view_mode'];
  $key = contextual_annotation_get_key();

  if (!empty($node->nid) && $view_mode == 'teaser' && $key) {
    $build['#contextual_links']['contextual_annotation'] = array('contextual_annotation/nojs/annotate', array($key, $node->nid));
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 *
 * Add the classes required for using ctools ajax calls. Bug (need to find reference) prevents this from being done by
 * passing options in hook_menu
 *
 * @param $element
 * @param $items
 */
function contextual_annotation_contextual_links_view_alter(&$element, &$items) {
  if (isset($element['#links']['contextual-annotation-'])) {
    $element['#links']['contextual-annotation-']['attributes'] = array('class' => 'ctools-use-modal edit-link');
  }
}

/**
 * Implements hook_menu().
 */
function contextual_annotation_menu() {

  $items['contextual_annotation'] = array(
      'title' => 'Annotate',
      'page callback' => 'contextual_annotation_annotate_form',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK
  );
  $items['contextual_annotation/%ctools_js/annotate/%/%'] = array(
      'title' => 'Edit Contextual Note for Term',
      'page callback' => 'contextual_annotation_annotate_form',
      'page arguments' => array(1, 3, 4),
      'access callback' => TRUE,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}


/**
 *  A modal form callback to set the annotation
 */
function contextual_annotation_annotate_form($js = NULL, $key = NULL, $nid = NULL) {
  if (!$js) {
    return drupal_get_form('contextual_annotation_edit', array('nid' => $nid, 'key' => $key));
  }

  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'title' => t('Add Annotation'),
    'ajax' => TRUE,
    'nid' => $nid,
    'key' => $key
  );

  $output = ctools_modal_form_wrapper('contextual_annotation_edit', $form_state);
  if (!empty($form_state['executed'])) {
    $output = array();
    $output[] = ctools_ajax_command_reload();
  }

  print ajax_render($output);
  exit;
}

/**
 * Post-submit processor
 */
function contextual_annotation_annotate_form_success($js, $action) {
  if (!$js) {
    // We should never be here out of ajax context
    return MENU_NOT_FOUND;
  }

  ctools_include('ajax');
  $commands = array();
  $commands[] = ctools_ajax_command_reload();

  print ajax_render($commands);
  exit;
}

/**
 * Form contextual_annotation edit form.
 *
 * @ingroup forms
 * @see taxonomy_form_term_submit()
 */
function contextual_annotation_edit(&$form_state, $edit = array()) {
  $key = (isset($edit['build_info']['args'][0]['key'])) ? $edit['build_info']['args'][0]['key'] : $edit['key'];
  $nid = (isset($edit['build_info']['args'][0]['nid'])) ? $edit['build_info']['args'][0]['nid'] : $edit['nid'];

  $o_annotation = contextual_annotation_get_annotation($key, $nid);
  $edit += array(
    'key' => $key,
    'nid' => $nid,
    'annotation' => ($o_annotation) ? $o_annotation['annotation'] : NULL,
    'position' => ($o_annotation) ? $o_annotation['position'] : NULL,
  );
  $form['annotation'] = array(
    '#type' => 'textarea',
    '#title' => t('Annotation'),
    '#default_value' => $edit['annotation'],
    '#maxlength' => 1024,
    '#required' => FALSE);

  $form['position'] = array(
    '#type' => 'select',
    '#title' => t('Position'),
    '#default_value' => $edit['position']?$edit['position']:'prefix',
    '#options' => array(
      'prefix' => t('Before the Teaser'),
      'suffix' => t('After the Teaser'),
    ),
  );

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $edit['nid']);

  $form['key'] = array(
    '#type' => 'value',
    '#value' => $edit['key']);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'));

  return $form;
}

/**
 * Submit handler to insert or update a annotation.
 *
 * @see contextual_annotation_edit()
 */
function contextual_annotation_edit_submit($form, &$form_state) {
  // Add or remove the annotation
  $values = $form_state['values'];
  $existing = contextual_annotation_get_annotation($values['key'], $values['nid']);
  if (drupal_strlen(trim($values['annotation']))) {
    $values = array(
          'annotation' => $values['annotation'],
          'annotation_key' => $values['key'],
          'nid' => $values['nid'],
          'position' => $values['position']
        );

    if ($existing) {
      contextual_annotation_update_annotation($values);
    }
    else {
      contextual_annotation_add_annotation($values);
    }
  }
  elseif ($existing) {
    contextual_annotation_delete_annotation($values['key'], $values['nid']);
  }

  return;
}

/**
 * Get an annotation
 */
function contextual_annotation_get_annotation($key, $nid) {

  static $cached_annotations = array();

  if (!strlen($key) || !$nid)
    return FALSE;

  if (!isset($cached_annotations[$key . "-" . $nid])) {
    $query = db_select('contextual_annotation', 'c')
      ->condition('c.annotation_key', $key)
      ->condition('c.nid', $nid);
    $query->addField('c', 'annotation');
    $query->addField('c', 'annotation_key');
    $query->addField('c', 'nid');
    $query->addField('c', 'position');
    $result = $query->execute()->fetchAssoc();
    $cached_annotations[$key . "-" . $nid] = $result ? $result : array();
  }

  return $cached_annotations[$key . "-" . $nid];
}

/**
 * Delete an annotation
 */
function contextual_annotation_delete_annotation($key, $nid) {

  if (!strlen($key) || !$nid)
    return FALSE;

  return db_delete('contextual_annotation')
    ->condition('key', $key)
    ->condition('nid', $nid)
    ->execute();
}

/**
 * Delete all annotations for a node
 */
function contextual_annotation_delete_node_annotations($nid) {

  if (!$nid) {
    return FALSE;
  }
  else {
    return db_query("DELETE FROM {contextual_annotation} WHERE nid = %d ", array($nid));
  }
}

/**
 * Add an annotation
 */
function contextual_annotation_update_annotation($values) {

  if (!strlen($values['annotation_key']) || !$values['nid'] || !strlen(trim($values['annotation']))) {
    return FALSE;
  }
  else {
    $keys = array('nid', 'annotation_key');
    return drupal_write_record('contextual_annotation', $values, $keys);
  }
}

/**
 * Update a annotation
 */
function contextual_annotation_add_annotation($values) {

  if (!strlen($values['annotation_key']) || !$values['nid'] || !strlen(trim($values['annotation']))) {
    return FALSE;
  }
  else {
    return drupal_write_record('contextual_annotation', $values);
  }
}

/**
 * Return a key representing the taxonomy page on which to display the annotation, or false if not on a taxonomy page
 */
function contextual_annotation_get_key() {
  $router_item = menu_get_item();

  // Check to see if we're on a taxonomy page
  if (strpos($router_item['path'], 'taxonomy/term') !== 0) {
    return FALSE;
  }
  else {
    $key = $router_item['page_arguments'][0]->tid;
    return "tid-" . $key;
  }
}